---
apiVersion: v1
kind: Namespace
metadata:
  name: test-services
  labels:
    name: test-services
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: service1-account
  namespace: test-services
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service1
  namespace: test-services
  labels:
    app: service1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: service1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: service1
    spec:
      serviceAccountName: service1-account
      containers:
      - name: service1
        image: nginx:stable
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 15
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      securityContext:
        fsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: service1
  namespace: test-services
  labels:
    app: service1
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: service1
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: service1-network-policy
  namespace: test-services
spec:
  podSelector:
    matchLabels:
      app: service1
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: service2
    ports:
    - protocol: TCP
      port: 80
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: service2
    ports:
    - protocol: TCP
      port: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: service1-hpa
  namespace: test-services
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: service1
  minReplicas: 2
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
